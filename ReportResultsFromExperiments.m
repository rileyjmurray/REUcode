%% First Experiment : Vary numJobs, numDataCenters, numServers. Keep maxTime constant.
%
% Run 50 trials for each problem instance the "failure rate" is the number
% of trials for which 10 random permutations performed better than
% Modified-Monaldo with post-processing, all divided by 50.
%
% The results indiciate that the hueristic performs poorly for small
% numbers of jobs (running 10 random permutations and selecting the best
% frequently beats Modified-Monaldo with post-processing.
%
% As the number of jobs increases, the success rate of the
% 10-random-permutation strategy drops rapidly. For larger problem
% instances the hueristic may be desirable.
%
% Failure rate increases as the numer of DataCenters increases, but this
% happens for both Monaldo on CPm | 1 | \sum C_j and Modified-Monaldo on 
% CPm | K | \sum C_j.
%
% Failure rate does not appear to be strongly tied with the number of
% servers per DataCenter.
%
% For random problem instances over this search space, Modified-Monaldo
% with post-processing on CPm | K | \sum C_j performs qualitatively 
% similarly to Monaldo on CPm | 1 | \sum C_j.
%

clear;
load('experiment1.mat');
run plotsFromExperiment1;

%% Second Experiment : Examine "poorer-case" performance. Vary maxTime.
%
% Run 50 trials. Define "failure rate" as above. The number of jobs is kept
% constant at 10 as this was the worst case number of jobs from Experiment
% 1.
%
% The results indicate that the performance of the algorithm does not
% appear to depend heavily on maxTime. This is the case for both Monaldo on
% CPm | 1 | \sum C_j and Modified-Monaldo on CPm | 1 | \sum C_j
%
% As before, performance worsens as number of DataCenters increases for
% both Monaldo and Modified-Monaldo. However, Monaldo's failure rate does
% not exceed 0.4, while Modified-Monaldo's failure rate reaches 0.62. This
% very bad in principal, but it is important to note that we have not yet
% analyzed by how much the solution differ. That is considered in
% Exhaustive Experiment 1 (at the end of this report).
%
% As the number of servers per DataCenter increases, the failure rate
% seems to follow a very slight increasing trend.
%
% The results again indicate that Monaldo and Modified-Monaldo with
% post-processing are qualitatively similar.
%
clear;
load('experiment2.mat');
run plotsFromExperiment2;

%% Third Experiment : Fix maxTime and numJobs, increase number of permutations.
%
% Run 50 trials. Instead of 10 random permutatations, consider 50 random
% permutations. As explained in "First Experiment," a trial "fails" if the
% best of the random permutations (in this case, 50 such permutations)
% beats Modified-Monaldo with post-processing.
%
% Since more permutations were generated, the maximum failure rate for both
% Monaldo and Modified-Monaldo with post-processing increases. Monaldo
% on CPm | 1 | \sum C_j had failure rate reach 0.5400. Modified-Monaldo
% with post-processing had failure rate reach 0.7600.
% 
% As in Experiment 2, the failure rate of Modified-Monaldo with 
% post-processing is bounded above by approximately 3 / 2 times the 
% failure rate of Monaldo.
%
clear;
load('experiment3.mat');
run plotsFromExperiment3;

%% Fourth Experiment : Comparing Objective Function Values by Ratio
%
% Run 50 trials. For each trial, generate 50 random permutations of the
% jobs to test the permutations generated by Monaldo and Modified-Monaldo.
%
% The "Performance Ratio" (for a given trial) is the objective function value of
% Modified-Monaldo divided by the objective function value of the best of
% the 50 random permutuations. A ratio less than 1 is preferable as the
% objective function is to minimize sum of completion times. A ratio of 1
% may occur even if Modified-Monaldo generates the optimal solution.
%
% We see that the performance ratio of Modified-Monaldo increases with
% number of DataCenters from best-case 0.9693 to 1.0188. The performance 
% ratio of Monaldo increases with number of DataCenters from best-case 
% 0.9495 to worst-case 1.0005.
% 
% The trend of decreasing performance as number of servers per DataCenter
% increases appears to be more visible than before (when evaluating
% performance by "failure rate").
%
% Again, the performances of Monaldo and Modified-Monaldo appear 
% qualitatively similar.

clear;
load('experiment4.mat');
run plotsFromExperiment4;

%% First Exhaustive Experiment : Compare Modified-Monaldo against all possible permutations.
%
% We considered only 7 jobs as 7! = 5040 already represented a significant
% amount of computing time. The small number of jobs is of little
% consequence because the relative performance of the algorithm seems 
% worst when the number of jobs is small.
%
% The three dimensional plots suggest that CPm | K | \sum C_j may be more
% sensitive to m (the number of DataCenters) than K (the number of servers
% at each DataCenter). This is perhaps significant because the
% approximation bound on Monaldo is independent of the number of
% DataCenters.
%
% It may be fruitful to run more experiments designed to examine the
% relative sensitivity of CPm | K | \sum C_j to "m" and "K." The data here
% only serves to offer guidance on a next step.
%
clear;
load('exhaust_experiment1.mat');
run plotsFromExhaustExperiment1;
